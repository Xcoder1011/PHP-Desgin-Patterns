<?php
/**
 * Created by PhpStorm.
 * User: wushangkun
 * Date: 2020/12/6
 * Time: 3:00 PM
 */


/// 《Callback / Callable 类型》
///


// 1. 回调函数示例

function eat() {
    echo 'eat';
}

class People {

    static function run()
    {
        echo 'people run';
    }

    public static function study()
    {
        echo 'people study';
    }

    static function work()
    {
        People::callIt2('self::run');
        echo 'people work';
    }

    static function baz($values)
    {
        return array_map('static::qux', $values);
    }

    static function qux($value)
    {
        return "{$value} : 123";
    }

    public function __invoke($name)
    {
        // TODO: Implement __invoke() method.
        echo 'Hello ', $name, "\n";
    }

    static function callIt(callable $callback)
    {
        $callback();
    }

    static function callIt2(callable $func)
    {
        call_user_func($func);
    }
}

// Type 1: Simple callback
call_user_func('eat');
call_user_func(eat());

// Type 2: Static class method call
call_user_func(array('People', 'run'));

// Type 3: Object method call
$people = new People();
call_user_func(array($people, 'run'));

// Type 4: Static class method call (As of PHP 5.2.3)
call_user_func('People::run');

echo "<br>";


// Type 5: Relative static class method call (As of PHP 5.3.0)


class Student extends People {

    public static function study()
    {
        // parent::study(); // TODO: Change the autogenerated stub
        echo 'student study';
    }
}

call_user_func(array('Student', 'parent::study'));

call_user_func(array('Student', 'study'));


// Type 6: Objects implementing __invoke can be used as callables (since PHP 5.3)

call_user_func($people, 'wushangkun');   # Hello wushangkun

echo "<br>";

/// People::callIt('People::run');  # people run

/// People::callIt(People::run());  # people run

People::callIt2('People::run'); # people run

People::work();                       # people run people work

print_r(People::baz([1, 2, 3]));      # workArray ( [0] => 1 : 123 [1] => 2 : 123 [2] => 3 : 123 )

echo "<br>";


// 2. 使用 Closure 的示例

$doubleNum = function ($num) {  # Closure
    return $num * 2;
};

$numbers = range(1, 5);

$price = array_map($doubleNum, $numbers);

print implode(',', $price);   # 2,4,6,8,10



class Test {

    protected $items = array();

    public function getItems()
    {
        return $this->items;
    }

    public function __construct()
    {
        $this->items[] = array($this, 'callBackOne');
        $this->items[] = array($this, 'callBackTwo');
    }

    public function callBackOne()
    {
        echo __METHOD__ . 'has been called as a callback.';
    }

    public function callBackTwo()
    {
        echo __METHOD__ . 'has been called as a callback.';
    }
}

$test = new Test();
$itemLists = $test->getItems();

foreach ($itemLists as $itemList)
{
    echo '<pre>';
    print_r($itemList());
    echo '</pre>';
}

/*
 * 打印结果：
 *
    Test::callBackOnehas been called as a callback.
    Test::callBackTwohas been called as a callback.
*/






